  // There is going to be a "context" passed to each calc function
  let calc = (ctx: PivotDataCalcContext): number => {
    let spec: PivotDataSpecification = ctx.specification;
    let fieldName: string = ctx.dataField.
    let source: DataTable = ctx.source;
    let filtered: DataTable = ctx.filtered;
    let current: DataTable = ctx.current;
    
    // A simple count would return rows of filtered
    return filtered.length;
    
    // A sum would return the 
    return filtered.rows.reduce((r) => {});
  }



  let pvSpec = new PivotDataSpecification();
  pvSpec.areaFields.set(new PivotAreaFieldSpec('Date', 'column'));
  pvSpec.areaFields.set(new PivotAreaFieldSpec('Strategy', 'column'));
  pvSpec.areaFields.set(new PivotAreaFieldSpec('Status', 'column'));
  pvSpec.areaFields.set(new PivotAreaFieldSpec('Fund', 'column'));
  pvSpec.dataFields.set(new PivotDataFieldSpec("Borrowing", fn));
  
  let pvService = new PivotDataService(pvSpec, dataTable);
  let pvTable = (await pvService.execute());
  
  Date  |  Strategy  |  Status    |  Fund  |  Borrowing  |  Leverage  | 
  ---------------------------------------------------------------------------------------------------------------------------- 
  Date  |  Homes     |  Invested  |  CHFL  |  543        |  Leverage
